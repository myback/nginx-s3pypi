load_module modules/ngx_http_js_module.so;

#user              nginx;
worker_processes  auto;

error_log  /dev/stderr info;
pid        /tmp/nginx.pid;


events {
    worker_connections  1024;
}

http {
    map $debug $append_log_msg {
        default 'requets="$request" time="$time_iso8601"';
        "~^true$"  'bytes_sent=$bytes_sent request_method=$request_method uri=$uri server_proto=$server_protocol reauest_time=$request_time host=$host msec=$msec referer="$http_referer" user_agent="$http_user_agent" x_forwarder_for="$http_x_forwarded_for"';
    }

    log_format  loki  escape=none     'client_ip=$remote_addr user=$remote_user status=$status body_byte_sent=$body_bytes_sent $append_log_msg';

    js_include                        s3.js;
    js_set              $s3_auth      s3_sign_header;
    js_set              $s3_date      date_now;
    js_set              $s3_endpoint  s3_endpoint;
    js_set              $debug        debug;
    js_set              $gitlab_url   gitlab_url;

    include                           /etc/nginx/mime.types;
    default_type                      application/octet-stream;
    client_body_temp_path             /tmp/client_temp;
    proxy_temp_path                   /tmp/proxy_temp_path;
    fastcgi_temp_path                 /tmp/fastcgi_temp;
    uwsgi_temp_path                   /tmp/uwsgi_temp;
    scgi_temp_path                    /tmp/scgi_temp;

    access_log          /dev/stdout   loki;
    server_tokens                     off;
    gzip                              off;
    sendfile                          on;
    client_max_body_size              8M;
    subrequest_output_buffer_size     8M;
    proxy_http_version                1.1;

    server {
        listen 8080;
        server_name _;

        resolver        8.8.8.8       valid=300s;
        #resolver                     127.0.0.11;  # docker
        resolver_timeout              3s;

        location = /healthz { return 200 '{"active": "true"}'; }
        location = /favicon.ico { access_log off; log_not_found off; }

        location = /gitlab {
            internal;

            proxy_hide_header Authorization;
            proxy_pass $gitlab_url/oauth/token;
        }

        location = /auth {
            internal;

            js_content gitlab_auth;
        }

        location ~* /bucket-query(?<s3_uri>/.*) {
            internal;

            proxy_set_header     x-amz-date       $s3_date;
            proxy_set_header     Authorization    $s3_auth;
            proxy_set_header     Accept-Encoding  'plain/text';
            proxy_hide_header    x-amz-id-2;
            proxy_hide_header    x-amz-request-id;

            proxy_pass           $s3_endpoint$s3_uri;
        }

        location ~ "^/(?<prefix>[\w]*[/]{0,1})(?<postfix>[\w\-\.]*)" {
            # Uncomment the lines below to use authentication only for upload
            # if ($request_method = 'PUT') {
                auth_request /auth;
            # }

            js_content   s3_request;
        }
    }
}

